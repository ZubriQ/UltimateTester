@page "/students/{id}"
@using Data.Database
@using Microsoft.Extensions.Logging
@using PlagiarismApp.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (_groups != null && _student != null)
{
    <h3>Editing student:</h3>

    <EditForm Model="@_model" OnValidSubmit="@UpdateStudent">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>First Name:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <InputText id="firstName" @bind-Value="_model.FirstName" />
        </div>
        <div>
            <label>Surname:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <InputText id="surname" @bind-Value="_model.Surname" />
        </div>
        <div>
            <label>Patronymic:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <InputText id="patronymic" @bind-Value="_model.Patronymic" />
        </div>
        <div>
            <label>Group:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <select @bind="_model.SelectedGroupId">
                <option value=""></option>
                @foreach (var group in _groups)
                {
                    <option value="@group.Id"> @group.Name </option>
                }
            </select>
        </div>

        <div class="form-floating" style="margin:10px">
            <button type="submit" class="btn btn-primary">Update</button>
            <button type="reset" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        </div>

    </EditForm>
}
else
{
    <OnDataLoading />
}

@code {
    private StudentModel _model = new();

    private Group[]? _groups;

    private Student? _student;

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeGroups();
        await InitializeStudent();
        InitializeModel();
    }

    private async Task InitializeGroups()
    {
        _groups = await HttpClient.GetFromJsonAsync<Group[]>
            (NavigationManager.BaseUri + "api/data/getgroups/");
    }

    private async Task InitializeStudent()
    {
        var student = await HttpClient.GetFromJsonAsync<Student?>
            (NavigationManager.BaseUri + "api/data/getstudent/" + Id);
        _student = student;
    }

    private void InitializeModel()
    {
        if (_student != null)
        {
            _model.FirstName = _student.FirstName;
            _model.Surname = _student.Surname;
            _model.Patronymic = _student.Patronymic;
            _model.SelectedGroupId = _student.Group.Id;
        }
    }

    private async Task UpdateStudent()
    {
        Edit();
        var response = await HttpClient.PutAsJsonAsync(
            NavigationManager.BaseUri + "api/data/putstudent", _student);
        NavigationManager.NavigateTo("/students");
    }

    private void Edit()
    {
        _student.FirstName = _model.FirstName;
        _student.Surname = _model.Surname;
        _student.Patronymic = _model.Patronymic;
        _student.Group = _groups.Single(g => g.Id == _model.SelectedGroupId);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/students");
    }
}
