@page "/projects/{id}"
@using Data.Database
@using System.Net.Http.Json;
@using Microsoft.Extensions.Logging
@using PlagiarismApp.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (projectTypes != null && students != null && project != null)
{
    <h3>
        Editing existing project:
    </h3>
    <div>
        <p>Date of passing: @(project.DateOfPassing)</p>
        <p>Student: @studentFullName</p>
    </div>

    <EditForm Model="@_model" OnValidSubmit="@UpdateProject">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Project type:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <select @bind="_model.SelectedProjectTypeId">
                <option value="" disabled selected>Choose a project type</option>
                @foreach (var projectType in projectTypes)
                {
                    <option value="@projectType.Id">
                        @(projectType.Name + " " + projectType.Description)
                    </option>
                }
            </select>
        </div>

        <div>
            <label>Name:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <InputText id="name" @bind-Value="_model.FileName" />
        </div>

        <div>
            <label>Git URL:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <InputText id="gitUrl" @bind-Value="_model.GitUrl" />
        </div>

        <div>
            <label>Path on disc:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <InputText id="pathOnDisc" @bind-Value="_model.PathOnDisc" />
        </div>

        @* These properties should not be edited.
        <div>
            <label>Originality percentage:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <InputNumber id="originalityPercentage" @bind-Value="_model.OriginalityPercentage" 
            disabled />
        </div>

        <div>
            <label>Date of passing:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <InputDate id="dateOfPassing" @bind-Value="_model.DateOfPassing" 
            disabled/>
        </div>

        <div>
            <label>Student:</label>
        </div>
        <div class="form-floating" style="margin:10px">
            <select @bind="_model.SelectedStudentId" disabled>
                <option value="" disabled selected>Выбор студента</option>
                @foreach (var student in students)
                {
                    <option value="@student.Id">
                        @(student.Group.Name + " " + student.FullName)
                    </option>
                }
            </select>
        </div>*@

        <div class="form-floating" style="margin:10px">
            <button type="submit" class="btn btn-primary">
                Update
            </button>
            <button type="reset" class="btn btn-primary" @onclick="Cancel">
                Cancel
            </button>
        </div>

    </EditForm>
}
else
{
    <OnDataLoading />
}

@code {
    private ProjectModel _model = new();

    private ProjectType[]? projectTypes;

    private Student[]? students;

    private Project? project;

    private string? studentFullName;

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeLabWorks();
        await InitializeStudents();
        await InitializeProject();
        InitializeModel();

        if (project is not null && project.Student is not null)
        {
            studentFullName = project.Student.FullName;
        }
    }

    private async Task InitializeLabWorks()
    {
        projectTypes = await HttpClient.GetFromJsonAsync<ProjectType[]?>
            (NavigationManager.BaseUri + "api/data/getprojecttypes/");
    }

    private async Task InitializeStudents()
    {
        students = await HttpClient.GetFromJsonAsync<Student[]?>
            (NavigationManager.BaseUri + "api/data/getstudents/");
    }

    private async Task InitializeProject()
    {
        project = await HttpClient.GetFromJsonAsync<Project?>
            (NavigationManager.BaseUri + "api/data/getproject/" + Id);
    }

    private void InitializeModel()
    {
        if (project != null)
        {
            _model.FileName = project.Name;
            _model.GitUrl = project.GitUrl;
            _model.PathOnDisc = project.PathOnDisc;
            _model.SelectedStudentId = project.StudentId;
            _model.SelectedProjectTypeId = project.ProjectTypeId;
        }
    }

    private async Task UpdateProject()
    {
        Edit();
        var response = await HttpClient.PutAsJsonAsync<Project?>(
            NavigationManager.BaseUri + "api/data/putproject/", project);
        NavigationManager.NavigateTo("/projects");
    }

    private void Edit()
    {
        if (project != null && students != null && projectTypes != null)
        {
            project.Name = _model.FileName;
            project.GitUrl = _model.GitUrl;
            project.PathOnDisc = _model.PathOnDisc;
            project.Student = null;
            project.ProjectType = null;
            project.StudentId = _model.SelectedStudentId;
            project.ProjectTypeId = _model.SelectedProjectTypeId;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/projects");
    }
}
